/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import React from 'react';
import { Tooltip, Button } from '@mui/material';
import StarImage from 'src/assets/images/star_1.png';
import { styled } from '@mui/material/styles';
import useCard2 from './useCard2';
 
const TypeQuest = styled("div")(({ theme }) =>({  
  backgroundColor: `rgba(250, 250, 250, 1)`,  
  boxShadow: `0px 1px 10px rgba(0, 0, 0, 0.12), 0px 4px 5px rgba(0, 0, 0, 0.14), 0px 2px 4px rgba(0, 0, 0, 0.2)`,  
  borderRadius: `8px`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  width: `390px`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  overflow: `hidden`,  
}));
  
const Image = styled("div", {
    shouldForwardProp: prop => !["props"].includes(prop.toString())
  })(({ props }) =>({  
  backgroundImage: `url(${ImageImage})`,  
  backgroundPosition: `center`,  
  backgroundSize: `cover`,  
  backgroundRepeat: `no-repeat`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  alignSelf: `stretch`,  
  height: `287px`,  
  margin: `0px`,  
  overflow: `hidden`,  
  backgroundImage: props.hotel.image,  
}));
  
const Content = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px 0px 20px 0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `18px 0px 0px 0px`,  
});
  
const Content1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px 20px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const About = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `350px`,  
  margin: `0px`,  
});
  
const Label = styled("div")(({ theme }) =>({  
  backgroundColor: `rgba(3, 169, 244, 1)`,  
  borderRadius: `50px`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `center`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `32px`,  
  margin: `0px`,  
}));
  
const Frame1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `center`,  
  alignItems: `center`,  
  padding: `0px 5px`,  
  boxSizing: `border-box`,  
  height: `24px`,  
  margin: `0px`,  
});
  
const Text = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `center`,  
  alignItems: `center`,  
  padding: `3px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Label1 = styled("div")(({ theme }) =>({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(255, 255, 255, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `500`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const SizeDetails = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 0.6)`,  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px 0px 0px 10px`,  
}));
  
const Details = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `350px`,  
  margin: `14px 0px 0px 0px`,  
});
  
const PropertyTitle = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 0.87)`,  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `16px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
}));
  
const LowerRow = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `space-between`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `14px 0px 0px 0px`,  
});
  
const LockUp = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
});
  
const Price = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 0.6)`,  
  fontStyle: `normal`,  
  fontFamily: `Roboto`,  
  fontWeight: `700`,  
  fontSize: `16px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const Rating = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `6px 0px 0px 0px`,  
});
  
const Star = styled("img")({  
  height: `12.67px`,  
  width: `13.33px`,  
  margin: `0px`,  
});
  
const Rating1 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 0.6)`,  
  fontStyle: `normal`,  
  fontFamily: `Roboto`,  
  fontWeight: `700`,  
  fontSize: `16px`,  
  letterSpacing: `0.15000000596046448px`,  
  textDecoration: `none`,  
  lineHeight: `150%`,  
  textTransform: `none`,  
  width: `161px`,  
  margin: `0px 0px 0px 6px`,  
}));
  
const Button1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
});
  
const ButtonContained = styled(Button)({  
  height: `48px`,  
  width: `133px`,  
  margin: `0px`,  
});
 
function Card2(props) {
  const {fns} = useCard2();
  return (
    <TypeQuest >
       <Image props={props} >
       </Image>
       <Content >
         <Content1 >
           <About >
             <Label >
               <Frame1 >
                 <Text >
                   <Label1 >
                     {props.hotel.tag}
                       </Label1>
                 </Text>
               </Frame1>
             </Label>
             <SizeDetails >
               {props.hotel.details}
                 </SizeDetails>
           </About>
           <Details >
             <PropertyTitle >
               {props.hotel.title}
                 </PropertyTitle>
           </Details>
           <LowerRow >
             <LockUp >
               <Price >
                 {props.hotel.price}
                   </Price>
               <Rating >
                 <Star  src={StarImage} alt={"star"}/>
                 <Rating1 >
                   {props.hotel.rating}
                     </Rating1>
               </Rating>
             </LockUp>
             <Button1 >
               <Tooltip arrow={true} placement={"top"}  title={'You can apply a 10% discount'}>
                 <ButtonContained variant="contained" size="large" color="primary"  onClick={fns.bookNowClicked}  > BOOK NOW </ButtonContained>
               </Tooltip>
             </Button1>
           </LowerRow>
         </Content1>
       </Content>
     </TypeQuest>
   );
}

export default Card2;
